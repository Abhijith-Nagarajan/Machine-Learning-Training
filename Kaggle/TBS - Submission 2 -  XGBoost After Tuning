{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Importing the required libraries\nimport numpy as np \nfrom numpy import percentile\nimport pandas as pd \nfrom sklearn import preprocessing,model_selection,metrics\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nimport optuna\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-05-12T17:41:47.779531Z","iopub.execute_input":"2022-05-12T17:41:47.780560Z","iopub.status.idle":"2022-05-12T17:41:50.874509Z","shell.execute_reply.started":"2022-05-12T17:41:47.780416Z","shell.execute_reply":"2022-05-12T17:41:50.873426Z"},"trusted":true},"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<style type='text/css'>\n.datatable table.frame { margin-bottom: 0; }\n.datatable table.frame thead { border-bottom: none; }\n.datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}\n.datatable .bool    { background: #DDDD99; }\n.datatable .object  { background: #565656; }\n.datatable .int     { background: #5D9E5D; }\n.datatable .float   { background: #4040CC; }\n.datatable .str     { background: #CC4040; }\n.datatable .time    { background: #40CC40; }\n.datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}\n.datatable .frame tbody td { text-align: left; }\n.datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}\n.datatable th:nth-child(2) { padding-left: 12px; }\n.datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}\n.datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}\n.datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}\n.datatable .sp {  opacity: 0.25;}\n.datatable .footer { font-size: 9px; }\n.datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}\n</style>\n"},"metadata":{}},{"name":"stdout","text":"/kaggle/input/tabular-playground-series-may-2022/sample_submission.csv\n/kaggle/input/tabular-playground-series-may-2022/train.csv\n/kaggle/input/tabular-playground-series-may-2022/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Loading the dataset","metadata":{}},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/tabular-playground-series-may-2022/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/tabular-playground-series-may-2022/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:45:59.950648Z","iopub.execute_input":"2022-05-12T18:45:59.950933Z","iopub.status.idle":"2022-05-12T18:46:07.947254Z","shell.execute_reply.started":"2022-05-12T18:45:59.950901Z","shell.execute_reply":"2022-05-12T18:46:07.946477Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":"### Understanding the training data ","metadata":{}},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2022-05-12T17:42:45.349645Z","iopub.execute_input":"2022-05-12T17:42:45.349860Z","iopub.status.idle":"2022-05-12T17:42:45.384573Z","shell.execute_reply.started":"2022-05-12T17:42:45.349834Z","shell.execute_reply":"2022-05-12T17:42:45.383894Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   id      f_00      f_01      f_02      f_03      f_04      f_05      f_06  \\\n0   0 -1.373246  0.238887 -0.243376  0.567405 -0.647715  0.839326  0.113133   \n1   1  1.697021 -1.710322 -2.230332 -0.545661  1.113173 -1.552175  0.447825   \n2   2  1.681726  0.616746 -1.027689  0.810492 -0.609086  0.113965 -0.708660   \n3   3 -0.118172 -0.587835 -0.804638  2.086822  0.371005 -0.128831 -0.282575   \n4   4  1.148481 -0.176567 -0.664871 -1.101343  0.467875  0.500117  0.407515   \n\n   f_07  f_08  ...      f_22      f_23      f_24      f_25      f_26  \\\n0     1     5  ... -2.540739  0.766952 -2.730628 -0.208177  1.363402   \n1     1     3  ...  2.278315 -0.633658 -1.217077 -3.782194 -0.058316   \n2     1     0  ... -1.385775 -0.520558 -0.009121  2.788536 -3.703488   \n3     3     2  ...  0.572594 -1.653213  1.686035 -2.533098 -0.608601   \n4     3     3  ... -3.912929 -1.430366  2.127649 -3.306784  4.371371   \n\n         f_27        f_28  f_29  f_30  target  \n0  ABABDADBAB   67.609153     0     0       0  \n1  ACACCADCEB  377.096415     0     0       1  \n2  AAAEABCKAD -195.599702     0     2       1  \n3  BDBBAACBCB  210.826205     0     0       1  \n4  BDBCBBCHFE -217.211798     0     1       1  \n\n[5 rows x 33 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>f_00</th>\n      <th>f_01</th>\n      <th>f_02</th>\n      <th>f_03</th>\n      <th>f_04</th>\n      <th>f_05</th>\n      <th>f_06</th>\n      <th>f_07</th>\n      <th>f_08</th>\n      <th>...</th>\n      <th>f_22</th>\n      <th>f_23</th>\n      <th>f_24</th>\n      <th>f_25</th>\n      <th>f_26</th>\n      <th>f_27</th>\n      <th>f_28</th>\n      <th>f_29</th>\n      <th>f_30</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>-1.373246</td>\n      <td>0.238887</td>\n      <td>-0.243376</td>\n      <td>0.567405</td>\n      <td>-0.647715</td>\n      <td>0.839326</td>\n      <td>0.113133</td>\n      <td>1</td>\n      <td>5</td>\n      <td>...</td>\n      <td>-2.540739</td>\n      <td>0.766952</td>\n      <td>-2.730628</td>\n      <td>-0.208177</td>\n      <td>1.363402</td>\n      <td>ABABDADBAB</td>\n      <td>67.609153</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1.697021</td>\n      <td>-1.710322</td>\n      <td>-2.230332</td>\n      <td>-0.545661</td>\n      <td>1.113173</td>\n      <td>-1.552175</td>\n      <td>0.447825</td>\n      <td>1</td>\n      <td>3</td>\n      <td>...</td>\n      <td>2.278315</td>\n      <td>-0.633658</td>\n      <td>-1.217077</td>\n      <td>-3.782194</td>\n      <td>-0.058316</td>\n      <td>ACACCADCEB</td>\n      <td>377.096415</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>1.681726</td>\n      <td>0.616746</td>\n      <td>-1.027689</td>\n      <td>0.810492</td>\n      <td>-0.609086</td>\n      <td>0.113965</td>\n      <td>-0.708660</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>-1.385775</td>\n      <td>-0.520558</td>\n      <td>-0.009121</td>\n      <td>2.788536</td>\n      <td>-3.703488</td>\n      <td>AAAEABCKAD</td>\n      <td>-195.599702</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>-0.118172</td>\n      <td>-0.587835</td>\n      <td>-0.804638</td>\n      <td>2.086822</td>\n      <td>0.371005</td>\n      <td>-0.128831</td>\n      <td>-0.282575</td>\n      <td>3</td>\n      <td>2</td>\n      <td>...</td>\n      <td>0.572594</td>\n      <td>-1.653213</td>\n      <td>1.686035</td>\n      <td>-2.533098</td>\n      <td>-0.608601</td>\n      <td>BDBBAACBCB</td>\n      <td>210.826205</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1.148481</td>\n      <td>-0.176567</td>\n      <td>-0.664871</td>\n      <td>-1.101343</td>\n      <td>0.467875</td>\n      <td>0.500117</td>\n      <td>0.407515</td>\n      <td>3</td>\n      <td>3</td>\n      <td>...</td>\n      <td>-3.912929</td>\n      <td>-1.430366</td>\n      <td>2.127649</td>\n      <td>-3.306784</td>\n      <td>4.371371</td>\n      <td>BDBCBBCHFE</td>\n      <td>-217.211798</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 33 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2022-05-12T17:42:45.385991Z","iopub.execute_input":"2022-05-12T17:42:45.386465Z","iopub.status.idle":"2022-05-12T17:42:45.539992Z","shell.execute_reply.started":"2022-05-12T17:42:45.386427Z","shell.execute_reply":"2022-05-12T17:42:45.539155Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 900000 entries, 0 to 899999\nData columns (total 33 columns):\n #   Column  Non-Null Count   Dtype  \n---  ------  --------------   -----  \n 0   id      900000 non-null  int64  \n 1   f_00    900000 non-null  float64\n 2   f_01    900000 non-null  float64\n 3   f_02    900000 non-null  float64\n 4   f_03    900000 non-null  float64\n 5   f_04    900000 non-null  float64\n 6   f_05    900000 non-null  float64\n 7   f_06    900000 non-null  float64\n 8   f_07    900000 non-null  int64  \n 9   f_08    900000 non-null  int64  \n 10  f_09    900000 non-null  int64  \n 11  f_10    900000 non-null  int64  \n 12  f_11    900000 non-null  int64  \n 13  f_12    900000 non-null  int64  \n 14  f_13    900000 non-null  int64  \n 15  f_14    900000 non-null  int64  \n 16  f_15    900000 non-null  int64  \n 17  f_16    900000 non-null  int64  \n 18  f_17    900000 non-null  int64  \n 19  f_18    900000 non-null  int64  \n 20  f_19    900000 non-null  float64\n 21  f_20    900000 non-null  float64\n 22  f_21    900000 non-null  float64\n 23  f_22    900000 non-null  float64\n 24  f_23    900000 non-null  float64\n 25  f_24    900000 non-null  float64\n 26  f_25    900000 non-null  float64\n 27  f_26    900000 non-null  float64\n 28  f_27    900000 non-null  object \n 29  f_28    900000 non-null  float64\n 30  f_29    900000 non-null  int64  \n 31  f_30    900000 non-null  int64  \n 32  target  900000 non-null  int64  \ndtypes: float64(16), int64(16), object(1)\nmemory usage: 226.6+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.describe()","metadata":{"execution":{"iopub.status.busy":"2022-05-12T17:42:45.542026Z","iopub.execute_input":"2022-05-12T17:42:45.542540Z","iopub.status.idle":"2022-05-12T17:42:46.531793Z","shell.execute_reply.started":"2022-05-12T17:42:45.542501Z","shell.execute_reply":"2022-05-12T17:42:46.530970Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                  id           f_00           f_01           f_02  \\\ncount  900000.000000  900000.000000  900000.000000  900000.000000   \nmean   449999.500000      -0.000286       0.001165       0.001174   \nstd    259807.765473       0.998888       0.999193       1.000514   \nmin         0.000000      -4.599856      -4.682199      -4.642676   \n25%    224999.750000      -0.675490      -0.675162      -0.674369   \n50%    449999.500000       0.001144       0.002014       0.002218   \n75%    674999.250000       0.674337       0.675021       0.677505   \nmax    899999.000000       4.749301       4.815699       4.961982   \n\n                f_03           f_04           f_05           f_06  \\\ncount  900000.000000  900000.000000  900000.000000  900000.000000   \nmean       -0.001368      -0.000571       0.000284      -0.000709   \nstd         1.000175       1.000167       0.999875       0.999942   \nmin        -4.658816      -4.748501      -4.750214      -4.842919   \n25%        -0.676114      -0.675909      -0.673437      -0.674876   \n50%        -0.002227      -0.001662      -0.000438      -0.001492   \n75%         0.672544       0.673789       0.675028       0.674749   \nmax         4.454920       4.948983       4.971881       4.822668   \n\n                f_07           f_08  ...           f_21           f_22  \\\ncount  900000.000000  900000.000000  ...  900000.000000  900000.000000   \nmean        2.031460       2.057998  ...      -0.156307      -0.009273   \nstd         1.656172       1.590955  ...       2.484706       2.450797   \nmin         0.000000       0.000000  ...     -13.310146     -11.853530   \n25%         1.000000       1.000000  ...      -1.820063      -1.645585   \n50%         2.000000       2.000000  ...      -0.152668       0.030850   \n75%         3.000000       3.000000  ...       1.507071       1.661676   \nmax        15.000000      16.000000  ...      14.455426      11.344080   \n\n                f_23           f_24           f_25           f_26  \\\ncount  900000.000000  900000.000000  900000.000000  900000.000000   \nmean       -0.369459      -0.342738       0.176549       0.357591   \nstd         2.453405       2.386941       2.416959       2.476020   \nmin       -12.301097     -11.416189     -11.918306     -14.300577   \n25%        -2.019739      -1.955956      -1.440424      -1.261598   \n50%        -0.390966      -0.340746       0.160912       0.404212   \n75%         1.255408       1.266673       1.795928       2.028219   \nmax        12.247100      12.389844      12.529179      12.913041   \n\n                f_28           f_29           f_30         target  \ncount  900000.000000  900000.000000  900000.000000  900000.000000  \nmean       -0.380876       0.345661       1.002654       0.486488  \nstd       238.773054       0.475584       0.818989       0.499818  \nmin     -1229.753052       0.000000       0.000000       0.000000  \n25%      -159.427418       0.000000       0.000000       0.000000  \n50%        -0.519808       0.000000       1.000000       0.000000  \n75%       158.987357       1.000000       2.000000       1.000000  \nmax      1229.562577       1.000000       2.000000       1.000000  \n\n[8 rows x 32 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>f_00</th>\n      <th>f_01</th>\n      <th>f_02</th>\n      <th>f_03</th>\n      <th>f_04</th>\n      <th>f_05</th>\n      <th>f_06</th>\n      <th>f_07</th>\n      <th>f_08</th>\n      <th>...</th>\n      <th>f_21</th>\n      <th>f_22</th>\n      <th>f_23</th>\n      <th>f_24</th>\n      <th>f_25</th>\n      <th>f_26</th>\n      <th>f_28</th>\n      <th>f_29</th>\n      <th>f_30</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>...</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n      <td>900000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>449999.500000</td>\n      <td>-0.000286</td>\n      <td>0.001165</td>\n      <td>0.001174</td>\n      <td>-0.001368</td>\n      <td>-0.000571</td>\n      <td>0.000284</td>\n      <td>-0.000709</td>\n      <td>2.031460</td>\n      <td>2.057998</td>\n      <td>...</td>\n      <td>-0.156307</td>\n      <td>-0.009273</td>\n      <td>-0.369459</td>\n      <td>-0.342738</td>\n      <td>0.176549</td>\n      <td>0.357591</td>\n      <td>-0.380876</td>\n      <td>0.345661</td>\n      <td>1.002654</td>\n      <td>0.486488</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>259807.765473</td>\n      <td>0.998888</td>\n      <td>0.999193</td>\n      <td>1.000514</td>\n      <td>1.000175</td>\n      <td>1.000167</td>\n      <td>0.999875</td>\n      <td>0.999942</td>\n      <td>1.656172</td>\n      <td>1.590955</td>\n      <td>...</td>\n      <td>2.484706</td>\n      <td>2.450797</td>\n      <td>2.453405</td>\n      <td>2.386941</td>\n      <td>2.416959</td>\n      <td>2.476020</td>\n      <td>238.773054</td>\n      <td>0.475584</td>\n      <td>0.818989</td>\n      <td>0.499818</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>-4.599856</td>\n      <td>-4.682199</td>\n      <td>-4.642676</td>\n      <td>-4.658816</td>\n      <td>-4.748501</td>\n      <td>-4.750214</td>\n      <td>-4.842919</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>-13.310146</td>\n      <td>-11.853530</td>\n      <td>-12.301097</td>\n      <td>-11.416189</td>\n      <td>-11.918306</td>\n      <td>-14.300577</td>\n      <td>-1229.753052</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>224999.750000</td>\n      <td>-0.675490</td>\n      <td>-0.675162</td>\n      <td>-0.674369</td>\n      <td>-0.676114</td>\n      <td>-0.675909</td>\n      <td>-0.673437</td>\n      <td>-0.674876</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>-1.820063</td>\n      <td>-1.645585</td>\n      <td>-2.019739</td>\n      <td>-1.955956</td>\n      <td>-1.440424</td>\n      <td>-1.261598</td>\n      <td>-159.427418</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>449999.500000</td>\n      <td>0.001144</td>\n      <td>0.002014</td>\n      <td>0.002218</td>\n      <td>-0.002227</td>\n      <td>-0.001662</td>\n      <td>-0.000438</td>\n      <td>-0.001492</td>\n      <td>2.000000</td>\n      <td>2.000000</td>\n      <td>...</td>\n      <td>-0.152668</td>\n      <td>0.030850</td>\n      <td>-0.390966</td>\n      <td>-0.340746</td>\n      <td>0.160912</td>\n      <td>0.404212</td>\n      <td>-0.519808</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>674999.250000</td>\n      <td>0.674337</td>\n      <td>0.675021</td>\n      <td>0.677505</td>\n      <td>0.672544</td>\n      <td>0.673789</td>\n      <td>0.675028</td>\n      <td>0.674749</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>...</td>\n      <td>1.507071</td>\n      <td>1.661676</td>\n      <td>1.255408</td>\n      <td>1.266673</td>\n      <td>1.795928</td>\n      <td>2.028219</td>\n      <td>158.987357</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>899999.000000</td>\n      <td>4.749301</td>\n      <td>4.815699</td>\n      <td>4.961982</td>\n      <td>4.454920</td>\n      <td>4.948983</td>\n      <td>4.971881</td>\n      <td>4.822668</td>\n      <td>15.000000</td>\n      <td>16.000000</td>\n      <td>...</td>\n      <td>14.455426</td>\n      <td>11.344080</td>\n      <td>12.247100</td>\n      <td>12.389844</td>\n      <td>12.529179</td>\n      <td>12.913041</td>\n      <td>1229.562577</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows Ã— 32 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(8,8))\nsns.countplot(x=train_df.target)","metadata":{"execution":{"iopub.status.busy":"2022-05-12T17:42:46.533120Z","iopub.execute_input":"2022-05-12T17:42:46.533688Z","iopub.status.idle":"2022-05-12T17:42:46.778801Z","shell.execute_reply.started":"2022-05-12T17:42:46.533646Z","shell.execute_reply":"2022-05-12T17:42:46.777974Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='target', ylabel='count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 576x576 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"### The dataset is balanced. Checking if there are any missing values.","metadata":{}},{"cell_type":"code","source":"train_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2022-05-12T17:42:55.602946Z","iopub.execute_input":"2022-05-12T17:42:55.603412Z","iopub.status.idle":"2022-05-12T17:42:55.740100Z","shell.execute_reply.started":"2022-05-12T17:42:55.603372Z","shell.execute_reply":"2022-05-12T17:42:55.739136Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"id        0\nf_00      0\nf_01      0\nf_02      0\nf_03      0\nf_04      0\nf_05      0\nf_06      0\nf_07      0\nf_08      0\nf_09      0\nf_10      0\nf_11      0\nf_12      0\nf_13      0\nf_14      0\nf_15      0\nf_16      0\nf_17      0\nf_18      0\nf_19      0\nf_20      0\nf_21      0\nf_22      0\nf_23      0\nf_24      0\nf_25      0\nf_26      0\nf_27      0\nf_28      0\nf_29      0\nf_30      0\ntarget    0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"### There are no missing values in the dataset.","metadata":{}},{"cell_type":"markdown","source":"#### Plotting a histogram for each numerical column","metadata":{}},{"cell_type":"code","source":"numerical_columns = [col for col in train_df.columns if train_df[col].dtypes!='object' and col not in ('id','target')]\ncat_column = [col for col in train_df.columns if train_df[col].dtypes=='object']","metadata":{"execution":{"iopub.status.busy":"2022-05-12T17:42:57.204107Z","iopub.execute_input":"2022-05-12T17:42:57.204745Z","iopub.status.idle":"2022-05-12T17:42:57.209781Z","shell.execute_reply.started":"2022-05-12T17:42:57.204705Z","shell.execute_reply":"2022-05-12T17:42:57.209012Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"len(numerical_columns),len(cat_column)","metadata":{"execution":{"iopub.status.busy":"2022-05-12T17:42:57.757655Z","iopub.execute_input":"2022-05-12T17:42:57.758335Z","iopub.status.idle":"2022-05-12T17:42:57.767460Z","shell.execute_reply.started":"2022-05-12T17:42:57.758296Z","shell.execute_reply":"2022-05-12T17:42:57.766654Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"(30, 1)"},"metadata":{}}]},{"cell_type":"code","source":"train_df[numerical_columns].hist(figsize=(25,25))","metadata":{"execution":{"iopub.status.busy":"2022-05-12T17:42:58.213777Z","iopub.execute_input":"2022-05-12T17:42:58.214054Z","iopub.status.idle":"2022-05-12T17:43:03.463254Z","shell.execute_reply.started":"2022-05-12T17:42:58.214023Z","shell.execute_reply":"2022-05-12T17:43:03.462557Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"array([[<AxesSubplot:title={'center':'f_00'}>,\n        <AxesSubplot:title={'center':'f_01'}>,\n        <AxesSubplot:title={'center':'f_02'}>,\n        <AxesSubplot:title={'center':'f_03'}>,\n        <AxesSubplot:title={'center':'f_04'}>],\n       [<AxesSubplot:title={'center':'f_05'}>,\n        <AxesSubplot:title={'center':'f_06'}>,\n        <AxesSubplot:title={'center':'f_07'}>,\n        <AxesSubplot:title={'center':'f_08'}>,\n        <AxesSubplot:title={'center':'f_09'}>],\n       [<AxesSubplot:title={'center':'f_10'}>,\n        <AxesSubplot:title={'center':'f_11'}>,\n        <AxesSubplot:title={'center':'f_12'}>,\n        <AxesSubplot:title={'center':'f_13'}>,\n        <AxesSubplot:title={'center':'f_14'}>],\n       [<AxesSubplot:title={'center':'f_15'}>,\n        <AxesSubplot:title={'center':'f_16'}>,\n        <AxesSubplot:title={'center':'f_17'}>,\n        <AxesSubplot:title={'center':'f_18'}>,\n        <AxesSubplot:title={'center':'f_19'}>],\n       [<AxesSubplot:title={'center':'f_20'}>,\n        <AxesSubplot:title={'center':'f_21'}>,\n        <AxesSubplot:title={'center':'f_22'}>,\n        <AxesSubplot:title={'center':'f_23'}>,\n        <AxesSubplot:title={'center':'f_24'}>],\n       [<AxesSubplot:title={'center':'f_25'}>,\n        <AxesSubplot:title={'center':'f_26'}>,\n        <AxesSubplot:title={'center':'f_28'}>,\n        <AxesSubplot:title={'center':'f_29'}>,\n        <AxesSubplot:title={'center':'f_30'}>]], dtype=object)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1800x1800 with 30 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"## Here are the some observations from the above plot:<br> \n*     ### It can be noticed that the numerical features are not uniformly scaled.\n     * #### <b>For instance, \"f_28\" ranges between -1000 to 1000 whereas many other features lie either between -4 to 4 or -10 to 10.</b>\n     * #### <b>Also, features \"f_07\" to \"f_18\" are left skewed while other features appear to be normally distributed.</b>\n*    ### Most importantly, since the base algorithm will be XGBoost, it is not required to perform scaling.","metadata":{}},{"cell_type":"code","source":"train_df[\"kfold\"] = -1\ntrain_df = train_df.sample(frac=1).reset_index(drop=True)\nX,y = train_df.drop('target',axis=1),train_df.target","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:46:25.296770Z","iopub.execute_input":"2022-05-12T18:46:25.297262Z","iopub.status.idle":"2022-05-12T18:46:26.200286Z","shell.execute_reply.started":"2022-05-12T18:46:25.297212Z","shell.execute_reply":"2022-05-12T18:46:26.199437Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"X.shape,y.shape","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:46:27.584875Z","iopub.execute_input":"2022-05-12T18:46:27.585771Z","iopub.status.idle":"2022-05-12T18:46:27.593097Z","shell.execute_reply.started":"2022-05-12T18:46:27.585716Z","shell.execute_reply":"2022-05-12T18:46:27.591883Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"((900000, 33), (900000,))"},"metadata":{}}]},{"cell_type":"markdown","source":"### Performing Stratified K-Fold validation with 10 splits","metadata":{}},{"cell_type":"code","source":"kfold = model_selection.StratifiedKFold(n_splits=10,shuffle=True)","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:46:31.544834Z","iopub.execute_input":"2022-05-12T18:46:31.545131Z","iopub.status.idle":"2022-05-12T18:46:31.549904Z","shell.execute_reply.started":"2022-05-12T18:46:31.545096Z","shell.execute_reply":"2022-05-12T18:46:31.548705Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"for fold,(train_index,valid_index) in enumerate(kfold.split(X=X,y=y)):\n    train_df.loc[valid_index,'kfold'] = fold\ntrain_df.to_csv(\"train_folds.csv\",index=False)","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:46:36.401020Z","iopub.execute_input":"2022-05-12T18:46:36.401336Z","iopub.status.idle":"2022-05-12T18:47:09.590061Z","shell.execute_reply.started":"2022-05-12T18:46:36.401302Z","shell.execute_reply":"2022-05-12T18:47:09.589136Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"useful_cols = [col for col in train_df.columns if col not in ('id','kfold','f_27','target')]\nuseful_cols","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:49:16.516152Z","iopub.execute_input":"2022-05-12T18:49:16.516762Z","iopub.status.idle":"2022-05-12T18:49:16.524164Z","shell.execute_reply.started":"2022-05-12T18:49:16.516723Z","shell.execute_reply":"2022-05-12T18:49:16.523444Z"},"trusted":true},"execution_count":47,"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"['f_00',\n 'f_01',\n 'f_02',\n 'f_03',\n 'f_04',\n 'f_05',\n 'f_06',\n 'f_07',\n 'f_08',\n 'f_09',\n 'f_10',\n 'f_11',\n 'f_12',\n 'f_13',\n 'f_14',\n 'f_15',\n 'f_16',\n 'f_17',\n 'f_18',\n 'f_19',\n 'f_20',\n 'f_21',\n 'f_22',\n 'f_23',\n 'f_24',\n 'f_25',\n 'f_26',\n 'f_28',\n 'f_29',\n 'f_30']"},"metadata":{}}]},{"cell_type":"code","source":"df_folds = pd.read_csv(\"./train_folds.csv\")","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:49:20.699948Z","iopub.execute_input":"2022-05-12T18:49:20.700718Z","iopub.status.idle":"2022-05-12T18:49:25.068252Z","shell.execute_reply.started":"2022-05-12T18:49:20.700675Z","shell.execute_reply":"2022-05-12T18:49:25.067496Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"df_folds.shape","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:49:39.985541Z","iopub.execute_input":"2022-05-12T18:49:39.985815Z","iopub.status.idle":"2022-05-12T18:49:39.992123Z","shell.execute_reply.started":"2022-05-12T18:49:39.985783Z","shell.execute_reply":"2022-05-12T18:49:39.991128Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"(900000, 34)"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Finding the optimal hyperparameter values by using fold 0 data.","metadata":{}},{"cell_type":"code","source":"def run(trial):\n    fold = 0\n    # Defining the hyperparameters \n    n_estimators = trial.suggest_int(\"n_estimators\",1000,10000)\n    learning_rate = trial.suggest_float(\"learning_rate\",0.01,0.25,log=True)\n    max_depth = trial.suggest_int(\"max_depth\",1,10)\n    reg_lambda = trial.suggest_loguniform(\"reg_lambda\",1e-8,100.0)\n    reg_alpha = trial.suggest_loguniform(\"reg_alpha\",1e-8,100.0)\n    subsample = trial.suggest_float(\"subsample\",0.1,1.0)\n    colsample_bytree = trial.suggest_float(\"subsample\",0.1,1.0)\n    \n    df_train = df_folds[df_folds.kfold!=fold].reset_index(drop=True)\n    df_validation = df_folds[df_folds.kfold==fold].reset_index(drop=True)\n    \n    X_train,Y_train = df_train.drop(['target'],axis=1),df_train.target\n    X_valid,Y_valid = df_validation.drop(['target'],axis=1),df_validation.target\n    \n    X_train,X_valid = X_train[useful_cols],X_valid[useful_cols]\n    \n    # Building the model \n    model = XGBClassifier(\n                                tree_method=\"gpu_hist\",gpu_id=1,predictor=\"gpu_predictor\",\n                                n_estimators=n_estimators,learning_rate=learning_rate,max_depth=max_depth,\n                                reg_lambda=reg_lambda,reg_alpha=reg_alpha,subsample=subsample,colsample_bytree=colsample_bytree \n                             )\n    \n    model.fit(X_train,Y_train,early_stopping_rounds=500,eval_set=[(X_valid,Y_valid)],verbose=1000)\n    Y_pred_valid = model.predict(X_valid)\n    accuracy = metrics.accuracy_score(Y_valid,Y_pred_valid)\n    print(f'Accuracy on validation data: {accuracy}')  \n    return accuracy","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:49:48.871022Z","iopub.execute_input":"2022-05-12T18:49:48.871351Z","iopub.status.idle":"2022-05-12T18:49:48.882856Z","shell.execute_reply.started":"2022-05-12T18:49:48.871317Z","shell.execute_reply":"2022-05-12T18:49:48.881838Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"study = optuna.create_study(direction=\"maximize\")\nstudy.optimize(run,n_trials=25)","metadata":{"execution":{"iopub.status.busy":"2022-05-12T18:49:54.941022Z","iopub.execute_input":"2022-05-12T18:49:54.941619Z","iopub.status.idle":"2022-05-12T19:15:24.039032Z","shell.execute_reply.started":"2022-05-12T18:49:54.941579Z","shell.execute_reply":"2022-05-12T19:15:24.038224Z"},"trusted":true},"execution_count":51,"outputs":[{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:49:54,942]\u001b[0m A new study created in memory with name: no-name-83fbd633-556f-40a4-a6f7-665c360e6bb4\u001b[0m\n/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:49:56] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.69057\n[1000]\tvalidation_0-logloss:0.38860\n[2000]\tvalidation_0-logloss:0.35754\n[3000]\tvalidation_0-logloss:0.34802\n[4000]\tvalidation_0-logloss:0.34298\n[5000]\tvalidation_0-logloss:0.34002\n[5585]\tvalidation_0-logloss:0.33879\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:50:44,725]\u001b[0m Trial 0 finished with value: 0.8690666666666667 and parameters: {'n_estimators': 5586, 'learning_rate': 0.04808606049414582, 'max_depth': 6, 'reg_lambda': 5.046399764921015e-06, 'reg_alpha': 5.305467962110433, 'subsample': 0.4209480084464384}. Best is trial 0 with value: 0.8690666666666667.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8690666666666667\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:50:46] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.69287\n[1000]\tvalidation_0-logloss:0.60804\n[2000]\tvalidation_0-logloss:0.57807\n[2798]\tvalidation_0-logloss:0.56320\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:50:56,788]\u001b[0m Trial 1 finished with value: 0.7298666666666667 and parameters: {'n_estimators': 2799, 'learning_rate': 0.014947231532428296, 'max_depth': 2, 'reg_lambda': 0.02879586602987321, 'reg_alpha': 0.00010065584923268988, 'subsample': 0.4909863476628481}. Best is trial 0 with value: 0.8690666666666667.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.7298666666666667\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:50:57] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.69054\n[1000]\tvalidation_0-logloss:0.38856\n[2000]\tvalidation_0-logloss:0.35657\n[3000]\tvalidation_0-logloss:0.34660\n[4000]\tvalidation_0-logloss:0.34202\n[5000]\tvalidation_0-logloss:0.33928\n[6000]\tvalidation_0-logloss:0.33749\n[7000]\tvalidation_0-logloss:0.33634\n[8000]\tvalidation_0-logloss:0.33539\n[9000]\tvalidation_0-logloss:0.33461\n[9548]\tvalidation_0-logloss:0.33425\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:53:33,400]\u001b[0m Trial 2 finished with value: 0.8705333333333334 and parameters: {'n_estimators': 9549, 'learning_rate': 0.022686760292125976, 'max_depth': 9, 'reg_lambda': 2.4631280847000846e-05, 'reg_alpha': 54.455111471822256, 'subsample': 0.5500716939507473}. Best is trial 2 with value: 0.8705333333333334.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8705333333333334\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:53:34] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.69291\n[1000]\tvalidation_0-logloss:0.58481\n[2000]\tvalidation_0-logloss:0.54761\n[3000]\tvalidation_0-logloss:0.52528\n[3341]\tvalidation_0-logloss:0.51809\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:53:48,854]\u001b[0m Trial 3 finished with value: 0.7717777777777778 and parameters: {'n_estimators': 3342, 'learning_rate': 0.011049493093609026, 'max_depth': 3, 'reg_lambda': 0.004552277523999746, 'reg_alpha': 1.057674729782253e-06, 'subsample': 0.400346498108188}. Best is trial 2 with value: 0.8705333333333334.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.7717777777777778\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:53:50] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.68839\n[1000]\tvalidation_0-logloss:0.36797\n[2000]\tvalidation_0-logloss:0.35565\n[3000]\tvalidation_0-logloss:0.35435\n[3546]\tvalidation_0-logloss:0.35528\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:54:32,253]\u001b[0m Trial 4 finished with value: 0.8593111111111111 and parameters: {'n_estimators': 4486, 'learning_rate': 0.08665453546876205, 'max_depth': 7, 'reg_lambda': 0.0003282359577576183, 'reg_alpha': 0.08067036403028227, 'subsample': 0.31958788273536953}. Best is trial 2 with value: 0.8705333333333334.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8593111111111111\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:54:33] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.69192\n[1000]\tvalidation_0-logloss:0.62186\n[1438]\tvalidation_0-logloss:0.62190\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:54:38,226]\u001b[0m Trial 5 finished with value: 0.6490111111111111 and parameters: {'n_estimators': 9398, 'learning_rate': 0.2183498299341731, 'max_depth': 1, 'reg_lambda': 4.986078908810462, 'reg_alpha': 0.2839415624857724, 'subsample': 0.11613254643420286}. Best is trial 2 with value: 0.8705333333333334.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.6490111111111111\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:54:39] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.69301\n[1000]\tvalidation_0-logloss:0.65593\n[2000]\tvalidation_0-logloss:0.64380\n[3000]\tvalidation_0-logloss:0.63710\n[4000]\tvalidation_0-logloss:0.63287\n[4327]\tvalidation_0-logloss:0.63182\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:54:52,649]\u001b[0m Trial 6 finished with value: 0.6450111111111111 and parameters: {'n_estimators': 4328, 'learning_rate': 0.013023708055084848, 'max_depth': 1, 'reg_lambda': 2.9987242059097094e-05, 'reg_alpha': 1.0714096597570775, 'subsample': 0.9732193960728954}. Best is trial 2 with value: 0.8705333333333334.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.6450111111111111\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:54:53] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.68771\n[1000]\tvalidation_0-logloss:0.36202\n[2000]\tvalidation_0-logloss:0.33894\n[3000]\tvalidation_0-logloss:0.33260\n[4000]\tvalidation_0-logloss:0.32979\n[5000]\tvalidation_0-logloss:0.32853\n[6000]\tvalidation_0-logloss:0.32792\n[6841]\tvalidation_0-logloss:0.32775\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:55:52,786]\u001b[0m Trial 7 finished with value: 0.8753444444444445 and parameters: {'n_estimators': 9789, 'learning_rate': 0.05246326235995674, 'max_depth': 6, 'reg_lambda': 0.005160154696080407, 'reg_alpha': 0.05468983629573752, 'subsample': 0.6463028885657155}. Best is trial 7 with value: 0.8753444444444445.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8753444444444445\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:55:53] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.68445\n[1000]\tvalidation_0-logloss:0.33511\n[2000]\tvalidation_0-logloss:0.32627\n[3000]\tvalidation_0-logloss:0.32438\n[4000]\tvalidation_0-logloss:0.32436\n[4161]\tvalidation_0-logloss:0.32437\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:56:29,694]\u001b[0m Trial 8 finished with value: 0.8775222222222222 and parameters: {'n_estimators': 6510, 'learning_rate': 0.09435221396090392, 'max_depth': 6, 'reg_lambda': 0.15172024077312227, 'reg_alpha': 6.960561267621626e-05, 'subsample': 0.9512730575880284}. Best is trial 8 with value: 0.8775222222222222.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8775222222222222\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:56:30] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.69259\n[1000]\tvalidation_0-logloss:0.52635\n[2000]\tvalidation_0-logloss:0.48208\n[3000]\tvalidation_0-logloss:0.45436\n[4000]\tvalidation_0-logloss:0.43604\n[5000]\tvalidation_0-logloss:0.42406\n[6000]\tvalidation_0-logloss:0.41525\n[7000]\tvalidation_0-logloss:0.40860\n[8000]\tvalidation_0-logloss:0.40350\n[8855]\tvalidation_0-logloss:0.39982\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:57:27,864]\u001b[0m Trial 9 finished with value: 0.8372444444444445 and parameters: {'n_estimators': 8856, 'learning_rate': 0.021425516526593278, 'max_depth': 5, 'reg_lambda': 7.83647556852222, 'reg_alpha': 0.4479736544822238, 'subsample': 0.19878703419710775}. Best is trial 8 with value: 0.8775222222222222.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8372444444444445\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:57:29] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.65820\n[810]\tvalidation_0-logloss:0.34570\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:58:06,592]\u001b[0m Trial 10 finished with value: 0.8766333333333334 and parameters: {'n_estimators': 7063, 'learning_rate': 0.19984828124283255, 'max_depth': 10, 'reg_lambda': 2.4451677106469612e-08, 'reg_alpha': 4.986185261371608e-07, 'subsample': 0.9317519170697575}. Best is trial 8 with value: 0.8775222222222222.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8766333333333334\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:58:07] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.65421\n[733]\tvalidation_0-logloss:0.34685\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:58:43,459]\u001b[0m Trial 11 finished with value: 0.8767111111111111 and parameters: {'n_estimators': 6968, 'learning_rate': 0.22121299592985913, 'max_depth': 10, 'reg_lambda': 1.1774676773951946e-08, 'reg_alpha': 2.8327064965533522e-08, 'subsample': 0.9717953784138992}. Best is trial 8 with value: 0.8775222222222222.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8767111111111111\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:58:44] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.67725\n[1000]\tvalidation_0-logloss:0.32302\n[1022]\tvalidation_0-logloss:0.32300\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:59:04,052]\u001b[0m Trial 12 finished with value: 0.8787888888888888 and parameters: {'n_estimators': 1023, 'learning_rate': 0.11093261865088706, 'max_depth': 8, 'reg_lambda': 1.0520214944560529e-08, 'reg_alpha': 1.5203113576305653e-08, 'subsample': 0.7780755310960275}. Best is trial 12 with value: 0.8787888888888888.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8787888888888888\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:59:05] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.67828\n[1000]\tvalidation_0-logloss:0.32330\n[2000]\tvalidation_0-logloss:0.32414\n[2067]\tvalidation_0-logloss:0.32437\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 18:59:44,253]\u001b[0m Trial 13 finished with value: 0.8783222222222222 and parameters: {'n_estimators': 6641, 'learning_rate': 0.10468216594881265, 'max_depth': 8, 'reg_lambda': 0.15255780368532457, 'reg_alpha': 0.0012497172978138055, 'subsample': 0.7533886107184863}. Best is trial 12 with value: 0.8787888888888888.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8783222222222222\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[18:59:45] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.67679\n[1000]\tvalidation_0-logloss:0.32375\n[1013]\tvalidation_0-logloss:0.32382\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:00:04,695]\u001b[0m Trial 14 finished with value: 0.8778222222222222 and parameters: {'n_estimators': 1014, 'learning_rate': 0.11439606089410408, 'max_depth': 8, 'reg_lambda': 4.0095137392837485e-07, 'reg_alpha': 0.0023494153264540965, 'subsample': 0.7875475310137177}. Best is trial 12 with value: 0.8787888888888888.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8778222222222222\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:00:05] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.67553\n[1000]\tvalidation_0-logloss:0.32438\n[1471]\tvalidation_0-logloss:0.32596\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:00:33,737]\u001b[0m Trial 15 finished with value: 0.8766555555555555 and parameters: {'n_estimators': 1472, 'learning_rate': 0.12724881196607055, 'max_depth': 8, 'reg_lambda': 0.6016940889207048, 'reg_alpha': 0.0007092016071037755, 'subsample': 0.7620224934314408}. Best is trial 12 with value: 0.8787888888888888.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8766555555555555\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:00:35] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.69086\n[1000]\tvalidation_0-logloss:0.42357\n[2000]\tvalidation_0-logloss:0.37954\n[2308]\tvalidation_0-logloss:0.37280\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:00:47,172]\u001b[0m Trial 16 finished with value: 0.8531444444444445 and parameters: {'n_estimators': 2309, 'learning_rate': 0.054396503509147535, 'max_depth': 4, 'reg_lambda': 28.957674707785223, 'reg_alpha': 3.59755805712475e-06, 'subsample': 0.785668708300188}. Best is trial 12 with value: 0.8787888888888888.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8531444444444445\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:00:48] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.67254\n[1000]\tvalidation_0-logloss:0.33278\n[1188]\tvalidation_0-logloss:0.33358\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:01:10,734]\u001b[0m Trial 17 finished with value: 0.8735888888888889 and parameters: {'n_estimators': 7824, 'learning_rate': 0.14333473060163085, 'max_depth': 8, 'reg_lambda': 0.0004105349664827356, 'reg_alpha': 1.045979099754233e-08, 'subsample': 0.639373241940496}. Best is trial 12 with value: 0.8787888888888888.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8735888888888889\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:01:11] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.67963\n[1000]\tvalidation_0-logloss:0.31694\n[1694]\tvalidation_0-logloss:0.31723\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:02:02,172]\u001b[0m Trial 18 finished with value: 0.8822333333333333 and parameters: {'n_estimators': 5391, 'learning_rate': 0.0787695908708863, 'max_depth': 9, 'reg_lambda': 2.547242030510146e-07, 'reg_alpha': 0.005185555843499701, 'subsample': 0.8496725929649038}. Best is trial 18 with value: 0.8822333333333333.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8822333333333333\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:02:03] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.68737\n[1000]\tvalidation_0-logloss:0.33165\n[2000]\tvalidation_0-logloss:0.31620\n[3000]\tvalidation_0-logloss:0.31338\n[4000]\tvalidation_0-logloss:0.31303\n[4343]\tvalidation_0-logloss:0.31361\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:04:11,826]\u001b[0m Trial 19 finished with value: 0.8834666666666666 and parameters: {'n_estimators': 4481, 'learning_rate': 0.03291434857101675, 'max_depth': 9, 'reg_lambda': 1.6315155987109948e-07, 'reg_alpha': 2.887040587117406e-05, 'subsample': 0.8647176282771512}. Best is trial 19 with value: 0.8834666666666666.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8834666666666666\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:04:13] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.68474\n[1000]\tvalidation_0-logloss:0.31828\n[2000]\tvalidation_0-logloss:0.31233\n[2618]\tvalidation_0-logloss:0.31293\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:06:15,427]\u001b[0m Trial 20 finished with value: 0.8835111111111111 and parameters: {'n_estimators': 5018, 'learning_rate': 0.040741575151457356, 'max_depth': 10, 'reg_lambda': 4.082308298772084e-07, 'reg_alpha': 0.009667259520190858, 'subsample': 0.8765614239031079}. Best is trial 20 with value: 0.8835111111111111.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8835111111111111\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:06:16] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.68609\n[1000]\tvalidation_0-logloss:0.32181\n[2000]\tvalidation_0-logloss:0.31229\n[2844]\tvalidation_0-logloss:0.31214\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:08:31,500]\u001b[0m Trial 21 finished with value: 0.8841555555555556 and parameters: {'n_estimators': 5058, 'learning_rate': 0.03408792547508642, 'max_depth': 10, 'reg_lambda': 3.568206318994946e-07, 'reg_alpha': 0.009950501391039123, 'subsample': 0.8764111561807713}. Best is trial 21 with value: 0.8841555555555556.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8841555555555556\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:08:32] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.68519\n[1000]\tvalidation_0-logloss:0.31851\n[2000]\tvalidation_0-logloss:0.31183\n[2842]\tvalidation_0-logloss:0.31246\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:10:46,684]\u001b[0m Trial 22 finished with value: 0.8848888888888888 and parameters: {'n_estimators': 4526, 'learning_rate': 0.038442373775622506, 'max_depth': 10, 'reg_lambda': 4.4146229302758256e-07, 'reg_alpha': 3.2287428442732536e-05, 'subsample': 0.8711371422200682}. Best is trial 22 with value: 0.8848888888888888.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8848888888888888\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:10:47] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.68654\n[1000]\tvalidation_0-logloss:0.32605\n[2000]\tvalidation_0-logloss:0.31660\n[2833]\tvalidation_0-logloss:0.31639\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:13:01,333]\u001b[0m Trial 23 finished with value: 0.8815777777777778 and parameters: {'n_estimators': 5476, 'learning_rate': 0.03539956585445244, 'max_depth': 10, 'reg_lambda': 3.5823407106845696e-06, 'reg_alpha': 0.023098783034587494, 'subsample': 0.6690860591422096}. Best is trial 22 with value: 0.8848888888888888.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8815777777777778\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:797: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  UserWarning,\n","output_type":"stream"},{"name":"stdout","text":"[19:13:02] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\n[0]\tvalidation_0-logloss:0.68631\n[1000]\tvalidation_0-logloss:0.32207\n[2000]\tvalidation_0-logloss:0.31193\n[3000]\tvalidation_0-logloss:0.31167\n[3028]\tvalidation_0-logloss:0.31173\n","output_type":"stream"},{"name":"stderr","text":"\u001b[32m[I 2022-05-12 19:15:24,033]\u001b[0m Trial 24 finished with value: 0.8844444444444445 and parameters: {'n_estimators': 3781, 'learning_rate': 0.03291634868772398, 'max_depth': 10, 'reg_lambda': 1.2365325413105453e-06, 'reg_alpha': 0.00016776281056268233, 'subsample': 0.87500131606868}. Best is trial 22 with value: 0.8848888888888888.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on validation data: 0.8844444444444445\n","output_type":"stream"}]},{"cell_type":"code","source":"study.best_params","metadata":{"execution":{"iopub.status.busy":"2022-05-12T19:17:17.979865Z","iopub.execute_input":"2022-05-12T19:17:17.980324Z","iopub.status.idle":"2022-05-12T19:17:17.989669Z","shell.execute_reply.started":"2022-05-12T19:17:17.980287Z","shell.execute_reply":"2022-05-12T19:17:17.988946Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"{'n_estimators': 4526,\n 'learning_rate': 0.038442373775622506,\n 'max_depth': 10,\n 'reg_lambda': 4.4146229302758256e-07,\n 'reg_alpha': 3.2287428442732536e-05,\n 'subsample': 0.8711371422200682}"},"metadata":{}}]},{"cell_type":"code","source":"test_predictions = []\ndef run_fold(fold):\n    print(f'Processing fold:{fold}')\n    df_train = df_folds[df_folds.kfold!=fold].reset_index(drop=True)\n    df_validation = df_folds[df_folds.kfold==fold].reset_index(drop=True)\n    \n    X_train,Y_train = df_train.drop(['target'],axis=1),df_train.target\n    X_valid,Y_valid = df_validation.drop(['target'],axis=1),df_validation.target\n    \n    X_train,X_valid = X_train[useful_cols],X_valid[useful_cols]\n    X_test = test_df.copy()\n    X_test = X_test[useful_cols]\n    \n    # Building the model \n    clf = XGBClassifier(tree_method='gpu_hist',gpu_id=1,\n                        predictor='gpu_predictor',\n                        n_estimators = 4526,\n                        learning_rate = 0.038442373775622506,\n                        max_depth = 10,\n                        reg_lambda = 4.4146229302758256e-07,\n                        reg_alpha =  3.2287428442732536e-05,\n                        subsample = 0.8711371422200682)\n    \n    clf.fit(X_train,Y_train)\n    Y_pred_valid = clf.predict(X_valid)\n    print(f'Accuracy on validation data: {metrics.accuracy_score(Y_valid,Y_pred_valid)}')\n    Y_pred_test = clf.predict(X_test)\n    test_predictions.append(Y_pred_test)","metadata":{"execution":{"iopub.status.busy":"2022-05-12T19:18:24.404102Z","iopub.execute_input":"2022-05-12T19:18:24.404830Z","iopub.status.idle":"2022-05-12T19:18:24.413781Z","shell.execute_reply.started":"2022-05-12T19:18:24.404788Z","shell.execute_reply":"2022-05-12T19:18:24.413076Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"print('Building an XGB classifier model')\nfor index in range(10):\n    run_fold(index)","metadata":{"execution":{"iopub.status.busy":"2022-05-12T19:18:26.702456Z","iopub.execute_input":"2022-05-12T19:18:26.702731Z","iopub.status.idle":"2022-05-12T19:55:21.239239Z","shell.execute_reply.started":"2022-05-12T19:18:26.702700Z","shell.execute_reply":"2022-05-12T19:55:21.238407Z"},"trusted":true},"execution_count":54,"outputs":[{"name":"stdout","text":"Building an XGB classifier model\nProcessing fold:0\n[19:18:27] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.8853555555555556\nProcessing fold:1\n[19:22:12] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.8852666666666666\nProcessing fold:2\n[19:25:53] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.8844\nProcessing fold:3\n[19:29:38] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.8840555555555556\nProcessing fold:4\n[19:33:15] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.8836777777777778\nProcessing fold:5\n[19:36:59] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.886\nProcessing fold:6\n[19:40:39] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.8857555555555555\nProcessing fold:7\n[19:44:17] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.8843\nProcessing fold:8\n[19:47:55] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.8852\nProcessing fold:9\n[19:51:39] WARNING: ../src/learner.cc:256: Only 1 GPUs are visible, setting `gpu_id` to 0\nAccuracy on validation data: 0.8821555555555556\n","output_type":"stream"}]},{"cell_type":"code","source":"final_predictions = np.mean(np.column_stack(test_predictions),axis=1).tolist()","metadata":{"execution":{"iopub.status.busy":"2022-05-12T19:56:24.038508Z","iopub.execute_input":"2022-05-12T19:56:24.039069Z","iopub.status.idle":"2022-05-12T19:56:24.164120Z","shell.execute_reply.started":"2022-05-12T19:56:24.039019Z","shell.execute_reply":"2022-05-12T19:56:24.163293Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"submissions_df = pd.read_csv(\"../input/tabular-playground-series-may-2022/sample_submission.csv\")\nsubmissions_df.target = final_predictions","metadata":{"execution":{"iopub.status.busy":"2022-05-12T19:56:26.283761Z","iopub.execute_input":"2022-05-12T19:56:26.284029Z","iopub.status.idle":"2022-05-12T19:56:26.541493Z","shell.execute_reply.started":"2022-05-12T19:56:26.283999Z","shell.execute_reply":"2022-05-12T19:56:26.540714Z"},"trusted":true},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"submissions_df.to_csv(\"submission2.csv\",index=False)","metadata":{"execution":{"iopub.status.busy":"2022-05-12T19:56:29.675568Z","iopub.execute_input":"2022-05-12T19:56:29.676049Z","iopub.status.idle":"2022-05-12T19:56:31.380208Z","shell.execute_reply.started":"2022-05-12T19:56:29.676008Z","shell.execute_reply":"2022-05-12T19:56:31.379375Z"},"trusted":true},"execution_count":57,"outputs":[]}]}
